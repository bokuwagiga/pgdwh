SET search_path = BL_3NF;




CREATE OR REPLACE PROCEDURE BL_3NF.LD_CE_ORDER_PRIORITIES()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer; log_message TEXT;
BEGIN
    WITH cte AS (
        SELECT
            DISTINCT ORDER_PRIORITY AS ORDER_PRIORITY_NAME,
            ORDER_PRIORITY_DESCRIPTION,
            MIN(ORDER_ID) AS ORDER_ID,
            MIN(SOURCE_TABLE) AS SOURCE_TABLE
        FROM (
            SELECT ORDER_PRIORITY, ORDER_PRIORITY_DESCRIPTION, ORDER_ID, 'src_offline_sales' AS SOURCE_TABLE FROM sa_sales.src_offline_sales
            UNION ALL
            SELECT ORDER_PRIORITY, ORDER_PRIORITY_DESCRIPTION, ORDER_ID, 'src_online_sales' AS SOURCE_TABLE FROM sa_sales.src_online_sales
        ) AS sq1
        GROUP BY ORDER_PRIORITY_NAME, ORDER_PRIORITY_DESCRIPTION
    )
    INSERT INTO BL_3NF.CE_ORDER_PRIORITIES
        (ORDER_PRIORITY_ID, ORDER_PRIORITY_SRC_ID, SOURCE_SYSTEM, SOURCE_TABLE, ORDER_PRIORITY_NAME, ORDER_PRIORITY_DESCRIPTION, UPDATE_DT)
    SELECT
        NEXTVAL('bl_3nf.order_priorities_seq') AS ORDER_PRIORITY_ID,
        COALESCE(cte.ORDER_ID::text, (SELECT ORDER_PRIORITY_SRC_ID FROM BL_3NF.CE_ORDER_PRIORITIES op WHERE op.ORDER_PRIORITY_ID = -1)) AS ORDER_PRIORITY_SRC_ID,
        COALESCE('sa_sales', (SELECT SOURCE_SYSTEM FROM BL_3NF.CE_ORDER_PRIORITIES op WHERE op.ORDER_PRIORITY_ID = -1)) AS SOURCE_SYSTEM,
        COALESCE(cte.SOURCE_TABLE, (SELECT SOURCE_TABLE FROM BL_3NF.CE_ORDER_PRIORITIES op WHERE op.ORDER_PRIORITY_ID = -1)) AS SOURCE_TABLE,
        COALESCE(UPPER(cte.ORDER_PRIORITY_NAME), (SELECT ORDER_PRIORITY_NAME FROM BL_3NF.CE_ORDER_PRIORITIES op WHERE op.ORDER_PRIORITY_ID = -1)) AS ORDER_PRIORITY_NAME,
        COALESCE(cte.ORDER_PRIORITY_DESCRIPTION, (SELECT ORDER_PRIORITY_DESCRIPTION FROM BL_3NF.CE_ORDER_PRIORITIES op WHERE op.ORDER_PRIORITY_ID = -1)) AS ORDER_PRIORITY_DESCRIPTION,
        COALESCE(CURRENT_DATE, (SELECT UPDATE_DT FROM BL_3NF.CE_ORDER_PRIORITIES op WHERE op.ORDER_PRIORITY_ID = -1)) AS UPDATE_DT
    FROM cte
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_3NF.CE_ORDER_PRIORITIES op
        WHERE UPPER(cte.ORDER_PRIORITY_NAME) = UPPER(op.ORDER_PRIORITY_NAME)
        AND UPPER(op.ORDER_PRIORITY_SRC_ID) = UPPER(cte.ORDER_ID::TEXT)
        AND UPPER(op.SOURCE_SYSTEM) = UPPER('SA_SALES')
        AND UPPER(op.SOURCE_TABLE) IN (UPPER('src_offline_sales'),UPPER('src_online_sales'))
    );
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT; 
    log_message := 'Procedure LD_CE_ORDER_PRIORITIES completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('LD_CE_ORDER_PRIORITIES', num_rows_affected, log_message);

EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in LD_CE_ORDER_PRIORITIES: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('LD_CE_ORDER_PRIORITIES', log_message);
        RAISE;
END;
$$;




CREATE OR REPLACE PROCEDURE BL_3NF.LD_CE_PROMOTION_TYPES()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer; log_message TEXT;
BEGIN
	WITH cte AS (
        SELECT
            DISTINCT PROMOTION_TYPE AS PROMOTION_TYPE_NAME,
            SALE_PERCENTAGE,
            MIN(ORDER_ID) AS ORDER_ID,
            MIN(SOURCE_TABLE) AS SOURCE_TABLE
        FROM (
            SELECT PROMOTION_TYPE, SALE_PERCENTAGE, ORDER_ID, 'src_offline_sales' AS SOURCE_TABLE FROM sa_sales.src_offline_sales
            UNION ALL
            SELECT PROMOTION_TYPE, SALE_PERCENTAGE, ORDER_ID, 'src_online_sales' AS SOURCE_TABLE FROM sa_sales.src_online_sales
        ) AS sq1
        GROUP BY PROMOTION_TYPE_NAME, SALE_PERCENTAGE
    )
    INSERT INTO BL_3NF.CE_PROMOTION_TYPES
        (PROMOTION_TYPE_ID, PROMOTION_TYPE_SRC_ID, SOURCE_SYSTEM, SOURCE_TABLE, PROMOTION_TYPE_NAME, SALE_PERCENTAGE, UPDATE_DT)
    SELECT
        NEXTVAL('bl_3nf.promotion_types_seq') AS PROMOTION_TYPE_ID,
        COALESCE(cte.ORDER_ID::text, (SELECT PROMOTION_TYPE_SRC_ID FROM BL_3NF.CE_PROMOTION_TYPES op WHERE op.PROMOTION_TYPE_ID = -1)) AS PROMOTION_TYPE_SRC_ID,
        COALESCE('sa_sales', (SELECT SOURCE_SYSTEM FROM BL_3NF.CE_PROMOTION_TYPES op WHERE op.PROMOTION_TYPE_ID = -1)) AS SOURCE_SYSTEM,
        COALESCE(cte.SOURCE_TABLE, (SELECT SOURCE_TABLE FROM BL_3NF.CE_PROMOTION_TYPES op WHERE op.PROMOTION_TYPE_ID = -1)) AS SOURCE_TABLE,
        COALESCE(UPPER(cte.PROMOTION_TYPE_NAME), (SELECT PROMOTION_TYPE_NAME FROM BL_3NF.CE_PROMOTION_TYPES op WHERE op.PROMOTION_TYPE_ID = -1)) AS PROMOTION_TYPE_NAME,
        COALESCE(cte.SALE_PERCENTAGE, (SELECT SALE_PERCENTAGE FROM BL_3NF.CE_PROMOTION_TYPES op WHERE op.PROMOTION_TYPE_ID = -1)) AS SALE_PERCENTAGE,
        COALESCE(CURRENT_DATE, (SELECT UPDATE_DT FROM BL_3NF.CE_PROMOTION_TYPES op WHERE op.PROMOTION_TYPE_ID = -1)) AS UPDATE_DT
    FROM cte
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_3NF.CE_PROMOTION_TYPES op
        WHERE UPPER(cte.PROMOTION_TYPE_NAME) = UPPER(op.PROMOTION_TYPE_NAME)
        AND UPPER(op.PROMOTION_TYPE_SRC_ID) = UPPER(cte.ORDER_ID::TEXT)
        AND UPPER(op.SOURCE_SYSTEM) = UPPER('SA_SALES')
        AND UPPER(op.SOURCE_TABLE) IN (UPPER('src_offline_sales'),UPPER('src_online_sales'))
    );
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT; 
    log_message := 'Procedure LD_CE_PROMOTION_TYPES completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('LD_CE_PROMOTION_TYPES', num_rows_affected, log_message);

EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in LD_CE_PROMOTION_TYPES: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('LD_CE_PROMOTION_TYPES', log_message);
        RAISE;
END;
$$;






CREATE OR REPLACE PROCEDURE BL_3NF.LD_CE_CUSTOMER_TYPES()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer; log_message TEXT;
BEGIN
    WITH cte AS (
        SELECT
            DISTINCT CUSTOMER_TYPE AS CUSTOMER_TYPE_NAME,
            CUSTOMER_TYPE_DESCRIPTION,
            MIN(ORDER_ID) AS ORDER_ID,
            MIN(SOURCE_TABLE) AS SOURCE_TABLE
        FROM (
            SELECT CUSTOMER_TYPE, CUSTOMER_TYPE_DESCRIPTION, ORDER_ID, 'src_offline_sales' AS SOURCE_TABLE FROM sa_sales.src_offline_sales
            UNION ALL
            SELECT CUSTOMER_TYPE, CUSTOMER_TYPE_DESCRIPTION, ORDER_ID, 'src_online_sales' AS SOURCE_TABLE FROM sa_sales.src_online_sales
        ) AS sq1
        GROUP BY CUSTOMER_TYPE_NAME, CUSTOMER_TYPE_DESCRIPTION
    )
    INSERT INTO BL_3NF.CE_CUSTOMER_TYPES
        (CUSTOMER_TYPE_ID, CUSTOMER_TYPE_SRC_ID, SOURCE_SYSTEM, SOURCE_TABLE, CUSTOMER_TYPE_NAME, CUSTOMER_TYPE_DESCRIPTION, UPDATE_DT)
    SELECT
        NEXTVAL('bl_3nf.customer_types_seq') AS CUSTOMER_TYPE_ID,
        COALESCE(cte.ORDER_ID::text, (SELECT CUSTOMER_TYPE_SRC_ID FROM BL_3NF.CE_CUSTOMER_TYPES ct WHERE ct.CUSTOMER_TYPE_ID = -1)) AS CUSTOMER_TYPE_SRC_ID,
        COALESCE('sa_sales', (SELECT SOURCE_SYSTEM FROM BL_3NF.CE_CUSTOMER_TYPES ct WHERE ct.CUSTOMER_TYPE_ID = -1)) AS SOURCE_SYSTEM,
        COALESCE(cte.SOURCE_TABLE, (SELECT SOURCE_TABLE FROM BL_3NF.CE_CUSTOMER_TYPES ct WHERE ct.CUSTOMER_TYPE_ID = -1)) AS SOURCE_TABLE,
        COALESCE(UPPER(cte.CUSTOMER_TYPE_NAME), (SELECT CUSTOMER_TYPE_NAME FROM BL_3NF.CE_CUSTOMER_TYPES ct WHERE ct.CUSTOMER_TYPE_ID = -1)) AS CUSTOMER_TYPE_NAME,
        COALESCE(cte.CUSTOMER_TYPE_DESCRIPTION, (SELECT CUSTOMER_TYPE_DESCRIPTION FROM BL_3NF.CE_CUSTOMER_TYPES ct WHERE ct.CUSTOMER_TYPE_ID = -1)) AS CUSTOMER_TYPE_DESCRIPTION,
        COALESCE(CURRENT_DATE, (SELECT UPDATE_DT FROM BL_3NF.CE_CUSTOMER_TYPES ct WHERE ct.CUSTOMER_TYPE_ID = -1)) AS UPDATE_DT
    FROM cte
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_3NF.CE_CUSTOMER_TYPES ct
        WHERE UPPER(cte.CUSTOMER_TYPE_NAME) = UPPER(ct.CUSTOMER_TYPE_NAME)
        AND UPPER(ct.CUSTOMER_TYPE_SRC_ID) = UPPER(cte.ORDER_ID::TEXT)
        AND UPPER(ct.SOURCE_SYSTEM) = UPPER('SA_SALES')
        AND UPPER(ct.SOURCE_TABLE) IN (UPPER('src_offline_sales'),UPPER('src_online_sales'))
    );
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT; 
    log_message := 'Procedure LD_CE_CUSTOMER_TYPES completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('LD_CE_CUSTOMER_TYPES', num_rows_affected, log_message);

EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in LD_CE_CUSTOMER_TYPES: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('LD_CE_CUSTOMER_TYPES', log_message);
        RAISE;
END;
$$;






CREATE OR REPLACE PROCEDURE BL_3NF.LD_CE_PAYMENT_METHODS()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer; log_message TEXT;
BEGIN
    WITH cte AS (
        SELECT
            DISTINCT PAYMENT_METHOD AS PAYMENT_METHOD_NAME,
            PAYMENT_METHOD_DESCRIPTION,
            MIN(ORDER_ID) AS ORDER_ID,
            MIN(SOURCE_TABLE) AS SOURCE_TABLE
        FROM (
            SELECT PAYMENT_METHOD, PAYMENT_METHOD_DESCRIPTION, ORDER_ID, 'src_offline_sales' AS SOURCE_TABLE FROM sa_sales.src_offline_sales
            UNION ALL
            SELECT PAYMENT_METHOD, PAYMENT_METHOD_DESCRIPTION, ORDER_ID, 'src_online_sales' AS SOURCE_TABLE FROM sa_sales.src_online_sales
        ) AS sq1
        GROUP BY PAYMENT_METHOD_NAME, PAYMENT_METHOD_DESCRIPTION
    )
    INSERT INTO BL_3NF.CE_PAYMENT_METHODS
        (PAYMENT_METHOD_ID, PAYMENT_METHOD_SRC_ID, SOURCE_SYSTEM, SOURCE_TABLE, PAYMENT_METHOD_NAME, PAYMENT_METHOD_DESCRIPTION, UPDATE_DT)
    SELECT
        NEXTVAL('bl_3nf.payment_methods_seq') AS PAYMENT_METHOD_ID,
        COALESCE(cte.ORDER_ID::text, (SELECT PAYMENT_METHOD_SRC_ID FROM BL_3NF.CE_PAYMENT_METHODS pm WHERE pm.PAYMENT_METHOD_ID = -1)) AS PAYMENT_METHOD_SRC_ID,
        COALESCE('sa_sales', (SELECT SOURCE_SYSTEM FROM BL_3NF.CE_PAYMENT_METHODS pm WHERE pm.PAYMENT_METHOD_ID = -1)) AS SOURCE_SYSTEM,
        COALESCE(cte.SOURCE_TABLE, (SELECT PAYMENT_METHOD_SRC_ID FROM BL_3NF.CE_PAYMENT_METHODS pm WHERE pm.PAYMENT_METHOD_ID = -1)) AS SOURCE_TABLE,
        COALESCE((cte.PAYMENT_METHOD_NAME), (SELECT PAYMENT_METHOD_NAME FROM BL_3NF.CE_PAYMENT_METHODS pm WHERE pm.PAYMENT_METHOD_ID = -1)) AS PAYMENT_METHOD_NAME,
        COALESCE(cte.PAYMENT_METHOD_DESCRIPTION, (SELECT PAYMENT_METHOD_DESCRIPTION FROM BL_3NF.CE_PAYMENT_METHODS pm WHERE pm.PAYMENT_METHOD_ID = -1)) AS PAYMENT_METHOD_DESCRIPTION,
        COALESCE(CURRENT_DATE, (SELECT UPDATE_DT FROM BL_3NF.CE_PAYMENT_METHODS pm WHERE pm.PAYMENT_METHOD_ID = -1)) AS UPDATE_DT
    FROM cte
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_3NF.CE_PAYMENT_METHODS pm
        WHERE UPPER(cte.PAYMENT_METHOD_NAME) = UPPER(pm.PAYMENT_METHOD_NAME)
        AND UPPER(pm.PAYMENT_METHOD_SRC_ID) = UPPER(cte.ORDER_ID::TEXT)
        AND UPPER(pm.SOURCE_SYSTEM) = UPPER('SA_SALES')
        AND UPPER(pm.SOURCE_TABLE) IN (UPPER('src_offline_sales'),UPPER('src_online_sales'))
    );
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT; 
    log_message := 'Procedure LD_CE_CUSTOMER_TYPES completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('LD_CE_ORDER_PRIORITIES', num_rows_affected, log_message);

EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in LD_CE_CUSTOMER_TYPES: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('LD_CE_CUSTOMER_TYPES', log_message);
        RAISE;
END;
$$;




CREATE OR REPLACE PROCEDURE BL_3NF.LD_CE_SALES_CHANNELS()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer; log_message TEXT;
BEGIN
    WITH cte AS (
        SELECT
            DISTINCT SALES_CHANNEL AS SALES_CHANNEL_NAME,
            MIN(ORDER_ID) AS ORDER_ID,
            MIN(SOURCE_TABLE) AS SOURCE_TABLE
        FROM (
            SELECT SALES_CHANNEL, ORDER_ID, 'src_offline_sales' AS SOURCE_TABLE FROM sa_sales.src_offline_sales
            UNION ALL
            SELECT SALES_CHANNEL, ORDER_ID, 'src_online_sales' AS SOURCE_TABLE FROM sa_sales.src_online_sales
        ) AS sq1
        GROUP BY SALES_CHANNEL_NAME
    )
    INSERT INTO BL_3NF.CE_SALES_CHANNELS
        (SALES_CHANNEL_ID, SALES_CHANNEL_SRC_ID, SOURCE_SYSTEM, SOURCE_TABLE, SALES_CHANNEL_NAME, UPDATE_DT)
    SELECT
        NEXTVAL('bl_3nf.sales_channels_seq') AS SALES_CHANNEL_ID,
        COALESCE(cte.ORDER_ID::text, (SELECT SALES_CHANNEL_SRC_ID FROM BL_3NF.CE_SALES_CHANNELS sh WHERE sh.SALES_CHANNEL_ID = -1)) AS SALES_CHANNEL_SRC_ID,
        COALESCE('sa_sales', (SELECT SOURCE_SYSTEM FROM BL_3NF.CE_SALES_CHANNELS sh WHERE sh.SALES_CHANNEL_ID = -1)) AS SOURCE_SYSTEM,
        COALESCE(cte.SOURCE_TABLE, (SELECT SOURCE_TABLE FROM BL_3NF.CE_SALES_CHANNELS sh WHERE sh.SALES_CHANNEL_ID = -1)) AS SOURCE_TABLE,
        COALESCE(UPPER(cte.SALES_CHANNEL_NAME), (SELECT SALES_CHANNEL_NAME FROM BL_3NF.CE_SALES_CHANNELS sh WHERE sh.SALES_CHANNEL_ID = -1)) AS SALES_CHANNEL_NAME,
        COALESCE(CURRENT_DATE, (SELECT UPDATE_DT FROM BL_3NF.CE_SALES_CHANNELS sh WHERE sh.SALES_CHANNEL_ID = -1)) AS UPDATE_DT
    FROM cte
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_3NF.CE_SALES_CHANNELS sh
        WHERE UPPER(cte.SALES_CHANNEL_NAME) = UPPER(sh.SALES_CHANNEL_NAME)
        AND UPPER(sh.SALES_CHANNEL_SRC_ID) = UPPER(cte.ORDER_ID::TEXT)
        AND UPPER(sh.SOURCE_SYSTEM) = UPPER('SA_SALES')
        AND UPPER(sh.SOURCE_TABLE) IN (UPPER('src_offline_sales'),UPPER('src_online_sales'))
    );
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT; 
    log_message := 'Procedure LD_CE_SALES_CHANNELS completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('LD_CE_SALES_CHANNELS', num_rows_affected, log_message);

EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in LD_CE_SALES_CHANNELS: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('LD_CE_SALES_CHANNELS', log_message);
        RAISE;
END;
$$;





CREATE OR REPLACE PROCEDURE BL_3NF.LD_CE_ORDERING_WAYS()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer; log_message TEXT;
BEGIN
    WITH cte AS (
        SELECT
            DISTINCT ORDERING_WAY AS ORDERING_WAY_NAME,
            ORDERING_WAY_DESCRIPTION,
            MIN(ORDER_ID) AS ORDER_ID,
            'src_online_sales' AS SOURCE_TABLE
        FROM sa_sales.src_online_sales
        GROUP BY ORDERING_WAY_NAME, ORDERING_WAY_DESCRIPTION
    )
    INSERT INTO BL_3NF.CE_ORDERING_WAYS
        (ORDERING_WAY_ID, ORDERING_WAY_SRC_ID, SOURCE_SYSTEM, SOURCE_TABLE, ORDERING_WAY_NAME, ORDERING_WAY_DESCRIPTION, UPDATE_DT)
    SELECT
        NEXTVAL('bl_3nf.ordering_ways_seq') AS ORDERING_WAY_ID,
        COALESCE(cte.ORDER_ID::text, (SELECT ORDERING_WAY_SRC_ID FROM BL_3NF.CE_ORDERING_WAYS ow WHERE ow.ORDERING_WAY_ID = -1)) AS ORDERING_WAY_SRC_ID,
        COALESCE('sa_sales', (SELECT SOURCE_SYSTEM FROM BL_3NF.CE_ORDERING_WAYS ow WHERE ow.ORDERING_WAY_ID = -1)) AS SOURCE_SYSTEM,
        COALESCE(cte.SOURCE_TABLE, (SELECT SOURCE_TABLE FROM BL_3NF.CE_ORDERING_WAYS ow WHERE ow.ORDERING_WAY_ID = -1)) AS SOURCE_TABLE,
        COALESCE(UPPER(cte.ORDERING_WAY_NAME), (SELECT ORDERING_WAY_NAME FROM BL_3NF.CE_ORDERING_WAYS ow WHERE ow.ORDERING_WAY_ID = -1)) AS ORDERING_WAY_NAME,
        COALESCE(cte.ORDERING_WAY_DESCRIPTION, (SELECT ORDERING_WAY_DESCRIPTION FROM BL_3NF.CE_ORDERING_WAYS ow WHERE ow.ORDERING_WAY_ID = -1)) AS ORDERING_WAY_DESCRIPTION,
        COALESCE(CURRENT_DATE, (SELECT UPDATE_DT FROM BL_3NF.CE_ORDERING_WAYS ow WHERE ow.ORDERING_WAY_ID = -1)) AS UPDATE_DT
    FROM cte
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_3NF.CE_ORDERING_WAYS ow
        WHERE UPPER(cte.ORDERING_WAY_NAME) = UPPER(ow.ORDERING_WAY_NAME)
        AND UPPER(ow.ORDERING_WAY_SRC_ID) = UPPER(cte.ORDER_ID::TEXT)
        AND UPPER(ow.SOURCE_SYSTEM) = UPPER('SA_SALES')
        AND UPPER(ow.SOURCE_TABLE) IN (UPPER('src_offline_sales'),UPPER('src_online_sales'))
    );
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT; 
    log_message := 'Procedure LD_CE_ORDERING_WAYS completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('LD_CE_ORDERING_WAYS', num_rows_affected, log_message);

EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in LD_CE_ORDERING_WAYS: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('LD_CE_ORDERING_WAYS', log_message);
        RAISE;
END;
$$;





CREATE OR REPLACE PROCEDURE BL_3NF.LD_CE_ITEM_CATEGORIES()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer; log_message TEXT;
BEGIN
    WITH cte AS (
        SELECT
            DISTINCT ITEM_CATEGORY AS ITEM_CATEGORY_NAME,
            MIN(ORDER_ID) AS ORDER_ID,
            MIN(SOURCE_TABLE) AS SOURCE_TABLE
        FROM (
            SELECT ITEM_CATEGORY, ORDER_ID, 'src_offline_sales' AS SOURCE_TABLE FROM sa_sales.src_offline_sales
            UNION ALL
            SELECT ITEM_CATEGORY, ORDER_ID, 'src_online_sales' AS SOURCE_TABLE FROM sa_sales.src_online_sales
        ) AS sq1
        GROUP BY ITEM_CATEGORY_NAME
    )
    INSERT INTO BL_3NF.CE_ITEM_CATEGORIES
        (ITEM_CATEGORY_ID, ITEM_CATEGORY_SRC_ID, SOURCE_SYSTEM, SOURCE_TABLE, ITEM_CATEGORY_NAME, UPDATE_DT)
    SELECT
        NEXTVAL('bl_3nf.item_categories_seq') AS ITEM_CATEGORY_ID,
        COALESCE(cte.ORDER_ID::text, (SELECT ITEM_CATEGORY_SRC_ID FROM BL_3NF.CE_ITEM_CATEGORIES ic WHERE ic.ITEM_CATEGORY_ID = -1)) AS ITEM_CATEGORY_SRC_ID,
        COALESCE('sa_sales', (SELECT SOURCE_SYSTEM FROM BL_3NF.CE_ITEM_CATEGORIES ic WHERE ic.ITEM_CATEGORY_ID = -1)) AS SOURCE_SYSTEM,
        COALESCE(cte.SOURCE_TABLE, (SELECT SOURCE_TABLE FROM BL_3NF.CE_ITEM_CATEGORIES ic WHERE ic.ITEM_CATEGORY_ID = -1)) AS SOURCE_TABLE,
        COALESCE(UPPER(cte.ITEM_CATEGORY_NAME), (SELECT ITEM_CATEGORY_NAME FROM BL_3NF.CE_ITEM_CATEGORIES ic WHERE ic.ITEM_CATEGORY_ID = -1)) AS ITEM_CATEGORY_NAME,
        COALESCE(CURRENT_DATE, (SELECT UPDATE_DT FROM BL_3NF.CE_ITEM_CATEGORIES ic WHERE ic.ITEM_CATEGORY_ID = -1)) AS UPDATE_DT
    FROM cte
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_3NF.CE_ITEM_CATEGORIES ic
        WHERE UPPER(cte.ITEM_CATEGORY_NAME) = UPPER(ic.ITEM_CATEGORY_NAME)
        AND UPPER(ic.ITEM_CATEGORY_SRC_ID) = UPPER(cte.ORDER_ID::TEXT)
        AND UPPER(ic.SOURCE_SYSTEM) = UPPER('SA_SALES')
        AND UPPER(ic.SOURCE_TABLE) IN (UPPER('src_offline_sales'),UPPER('src_online_sales'))
    );
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT; 
    log_message := 'Procedure LD_CE_ITEM_CATEGORIES completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('LD_CE_ITEM_CATEGORIES', num_rows_affected, log_message);

EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in LD_CE_ITEM_CATEGORIES: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('LD_CE_ITEM_CATEGORIES', log_message);
        RAISE;
END;
$$;




CREATE OR REPLACE PROCEDURE BL_3NF.LD_CE_ITEM_TYPES()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer; log_message TEXT;
BEGIN
    WITH cte AS (
        SELECT DISTINCT ITEM_TYPE AS ITEM_TYPE_NAME, ITEM_CATEGORY AS ITEM_CATEGORY_NAME, MIN(ORDER_ID) AS ORDER_ID, MIN(SOURCE_TABLE) AS SOURCE_TABLE
        FROM (SELECT ITEM_TYPE, ITEM_CATEGORY, ORDER_ID, 'src_offline_sales' AS SOURCE_TABLE FROM sa_sales.src_offline_sales
            UNION ALL
            SELECT ITEM_TYPE, ITEM_CATEGORY, ORDER_ID, 'src_online_sales' AS SOURCE_TABLE FROM sa_sales.src_online_sales
        ) AS sq1
        GROUP BY ITEM_TYPE_NAME, ITEM_CATEGORY_NAME
    ), cte2 AS (
        SELECT cte.ITEM_TYPE_NAME, cic.ITEM_CATEGORY_ID, cte.ORDER_ID, cte.SOURCE_TABLE
        FROM cte
        LEFT JOIN BL_3NF.CE_ITEM_CATEGORIES cic ON UPPER(cte.ITEM_CATEGORY_NAME) = UPPER(cic.ITEM_CATEGORY_NAME)
        AND UPPER(cic.SOURCE_SYSTEM) = UPPER('sa_sales') AND UPPER(cic.SOURCE_TABLE) =  UPPER(cte.SOURCE_TABLE)
    )
    INSERT INTO BL_3NF.CE_ITEM_TYPES
        (ITEM_TYPE_ID, ITEM_TYPE_SRC_ID, SOURCE_SYSTEM, SOURCE_TABLE, ITEM_TYPE_NAME, ITEM_CATEGORY_ID, UPDATE_DT)
    SELECT
        NEXTVAL('bl_3nf.item_types_seq') AS ITEM_TYPE_ID,
        COALESCE(cte2.ORDER_ID::text, (SELECT ITEM_TYPE_SRC_ID FROM BL_3NF.CE_ITEM_TYPES it WHERE it.ITEM_TYPE_ID = -1)) AS ITEM_TYPE_SRC_ID,
        COALESCE('sa_sales', (SELECT SOURCE_SYSTEM FROM BL_3NF.CE_ITEM_TYPES it WHERE it.ITEM_TYPE_ID = -1)) AS SOURCE_SYSTEM,
        COALESCE(cte2.SOURCE_TABLE, (SELECT SOURCE_TABLE FROM BL_3NF.CE_ITEM_TYPES it WHERE it.ITEM_TYPE_ID = -1)) AS SOURCE_TABLE,
        COALESCE(UPPER(cte2.ITEM_TYPE_NAME), (SELECT ITEM_TYPE_NAME FROM BL_3NF.CE_ITEM_TYPES it WHERE it.ITEM_TYPE_ID = -1)) AS ITEM_TYPE_NAME,
        COALESCE(cte2.ITEM_CATEGORY_ID, (SELECT ITEM_CATEGORY_ID FROM BL_3NF.CE_ITEM_TYPES it WHERE it.ITEM_TYPE_ID = -1)) AS ITEM_CATEGORY_ID,
        COALESCE(CURRENT_DATE, (SELECT UPDATE_DT FROM BL_3NF.CE_ITEM_TYPES it WHERE it.ITEM_TYPE_ID = -1)) AS UPDATE_DT
    FROM cte2
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_3NF.CE_ITEM_TYPES it
        WHERE UPPER(cte2.ITEM_TYPE_NAME) = UPPER(it.ITEM_TYPE_NAME)
        AND UPPER(it.ITEM_TYPE_SRC_ID) = UPPER(cte2.ORDER_ID::TEXT)
        AND UPPER(it.SOURCE_SYSTEM) = UPPER('SA_SALES')
        AND UPPER(it.SOURCE_TABLE) IN (UPPER('src_offline_sales'),UPPER('src_online_sales'))
    );
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT; 
    log_message := 'Procedure LD_CE_ITEM_TYPES completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('LD_CE_ITEM_TYPES', num_rows_affected, log_message);

EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in LD_CE_ITEM_TYPES: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('LD_CE_ITEM_TYPES', log_message);
        RAISE;
END;
$$;





CREATE OR REPLACE PROCEDURE BL_3NF.LD_CE_ITEMS()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer; log_message TEXT;
BEGIN
    WITH cte AS (
        SELECT DISTINCT ITEM AS ITEM_NAME, ITEM_TYPE AS ITEM_TYPE_NAME, MIN(ORDER_ID) AS ORDER_ID, MIN(SOURCE_TABLE) AS SOURCE_TABLE
        FROM (SELECT ITEM, ITEM_TYPE, ORDER_ID, 'src_offline_sales' AS SOURCE_TABLE FROM sa_sales.src_offline_sales
            UNION ALL
            SELECT ITEM, ITEM_TYPE, ORDER_ID, 'src_online_sales' AS SOURCE_TABLE FROM sa_sales.src_online_sales
        ) AS sq1
        GROUP BY ITEM_NAME, ITEM_TYPE_NAME
    ), cte2 AS (
        SELECT cte.ITEM_NAME, cit.ITEM_TYPE_ID, cte.ORDER_ID, cte.SOURCE_TABLE
        FROM cte
        LEFT JOIN BL_3NF.CE_ITEM_TYPES cit ON UPPER(cte.ITEM_TYPE_NAME) = UPPER(cit.ITEM_TYPE_NAME)
        AND UPPER(cit.SOURCE_SYSTEM) = UPPER('sa_sales') AND UPPER(cit.SOURCE_TABLE) =  UPPER(cte.SOURCE_TABLE)

    )
    INSERT INTO BL_3NF.CE_ITEMS
        (ITEM_ID, ITEM_SRC_ID, SOURCE_SYSTEM, SOURCE_TABLE, ITEM_NAME, ITEM_TYPE_ID, UPDATE_DT)
    SELECT
        NEXTVAL('bl_3nf.items_seq') AS ITEM_ID,
        COALESCE(cte2.ORDER_ID::text, (SELECT ITEM_SRC_ID FROM BL_3NF.CE_ITEMS i WHERE i.ITEM_ID = -1)) AS ITEM_SRC_ID,
        COALESCE('sa_sales', (SELECT SOURCE_SYSTEM FROM BL_3NF.CE_ITEMS i WHERE i.ITEM_ID = -1)) AS SOURCE_SYSTEM,
        COALESCE(cte2.SOURCE_TABLE, (SELECT SOURCE_TABLE FROM BL_3NF.CE_ITEMS i WHERE i.ITEM_ID = -1)) AS SOURCE_TABLE,
        COALESCE(UPPER(cte2.ITEM_NAME), (SELECT ITEM_NAME FROM BL_3NF.CE_ITEMS i WHERE i.ITEM_ID = -1)) AS ITEM_NAME,
        COALESCE(cte2.ITEM_TYPE_ID, (SELECT ITEM_TYPE_ID FROM BL_3NF.CE_ITEMS i WHERE i.ITEM_ID = -1)) AS ITEM_TYPE_ID,
        COALESCE(CURRENT_DATE, (SELECT UPDATE_DT FROM BL_3NF.CE_ITEMS i WHERE i.ITEM_ID = -1)) AS UPDATE_DT
    FROM cte2
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_3NF.CE_ITEMS i
        WHERE UPPER(cte2.ITEM_NAME) = UPPER(i.ITEM_NAME)
        AND UPPER(i.ITEM_SRC_ID) = UPPER(cte2.ORDER_ID::TEXT)
        AND UPPER(i.SOURCE_SYSTEM) = UPPER('SA_SALES')
        AND UPPER(i.SOURCE_TABLE) IN (UPPER('src_offline_sales'),UPPER('src_online_sales'))
    );
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT; 
    log_message := 'Procedure LD_CE_ITEMS completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('LD_CE_ITEMS', num_rows_affected, log_message);

EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in LD_CE_ITEMS: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('LD_CE_ITEMS', log_message);
        RAISE;
END;
$$;






CREATE OR REPLACE PROCEDURE BL_3NF.LD_CE_REGIONS()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer; log_message TEXT;
BEGIN
    WITH cte AS (
        SELECT DISTINCT STORE_REGION AS REGION_NAME, MIN(ORDER_ID) AS ORDER_ID, MIN(SOURCE_TABLE) AS SOURCE_TABLE
        FROM (
            SELECT STORE_REGION, ORDER_ID, 'src_offline_sales' AS SOURCE_TABLE FROM sa_sales.src_offline_sales
            UNION ALL
            SELECT STORE_REGION, ORDER_ID, 'src_online_sales' AS SOURCE_TABLE FROM sa_sales.src_online_sales
        ) AS sq1
        GROUP BY REGION_NAME
    )
    INSERT INTO BL_3NF.CE_REGIONS
        (REGION_ID, REGION_SRC_ID, SOURCE_SYSTEM, SOURCE_TABLE, REGION_NAME, UPDATE_DT)
    SELECT
        NEXTVAL('bl_3nf.regions_seq') AS REGION_ID,
        COALESCE(cte.ORDER_ID::text, (SELECT REGION_SRC_ID FROM BL_3NF.CE_REGIONS r WHERE r.REGION_ID = -1)) AS REGION_SRC_ID,
        COALESCE('sa_sales', (SELECT SOURCE_SYSTEM FROM BL_3NF.CE_REGIONS r WHERE r.REGION_ID = -1)) AS SOURCE_SYSTEM,
        COALESCE(cte.SOURCE_TABLE, (SELECT SOURCE_TABLE FROM BL_3NF.CE_REGIONS r WHERE r.REGION_ID = -1)) AS SOURCE_TABLE,
        COALESCE(UPPER(cte.REGION_NAME), (SELECT REGION_NAME FROM BL_3NF.CE_REGIONS r WHERE r.REGION_ID = -1)) AS REGION_NAME,
        COALESCE(CURRENT_DATE, (SELECT UPDATE_DT FROM BL_3NF.CE_REGIONS r WHERE r.REGION_ID = -1)) AS UPDATE_DT
    FROM cte
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_3NF.CE_REGIONS r
        WHERE UPPER(cte.REGION_NAME) = UPPER(r.REGION_NAME)
        AND UPPER(r.REGION_SRC_ID) = UPPER(cte.ORDER_ID::TEXT)
        AND UPPER(r.SOURCE_SYSTEM) = UPPER('SA_SALES')
        AND UPPER(r.SOURCE_TABLE) IN (UPPER('src_offline_sales'),UPPER('src_online_sales'))
    );
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT; 
    log_message := 'Procedure LD_CE_REGIONS completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('LD_CE_REGIONS', num_rows_affected, log_message);

EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in LD_CE_REGIONS: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('LD_CE_REGIONS', log_message);
        RAISE;
END;
$$;





CREATE OR REPLACE PROCEDURE BL_3NF.LD_CE_COUNTRIES()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer; log_message TEXT;
BEGIN
    WITH cte AS (
        SELECT DISTINCT STORE_COUNTRY AS COUNTRY_NAME, STORE_REGION AS REGION_NAME, MIN(ORDER_ID) AS ORDER_ID, MIN(SOURCE_TABLE) AS SOURCE_TABLE
        FROM (SELECT STORE_COUNTRY, STORE_REGION, ORDER_ID, 'src_offline_sales' AS SOURCE_TABLE FROM sa_sales.src_offline_sales
            UNION ALL
            SELECT STORE_COUNTRY, STORE_REGION, ORDER_ID, 'src_online_sales' AS SOURCE_TABLE FROM sa_sales.src_online_sales
        ) AS sq1
        GROUP BY COUNTRY_NAME, REGION_NAME
    ), cte2 AS (
        SELECT cte.COUNTRY_NAME, cr.REGION_ID, cte.ORDER_ID, cte.SOURCE_TABLE
        FROM cte
        LEFT JOIN BL_3NF.CE_REGIONS cr ON UPPER(cte.REGION_NAME) = UPPER(cr.REGION_NAME)
        AND UPPER(cr.SOURCE_SYSTEM) = UPPER('sa_sales') AND UPPER(cr.SOURCE_TABLE) =  UPPER(cte.SOURCE_TABLE)

    )
    INSERT INTO BL_3NF.CE_COUNTRIES
        (COUNTRY_ID, COUNTRY_SRC_ID, SOURCE_SYSTEM, SOURCE_TABLE, COUNTRY_NAME, REGION_ID, UPDATE_DT)
    SELECT
        NEXTVAL('bl_3nf.countries_seq') AS COUNTRY_ID,
        COALESCE(cte2.ORDER_ID::text, (SELECT COUNTRY_SRC_ID FROM BL_3NF.CE_COUNTRIES c WHERE c.COUNTRY_ID = -1)) AS COUNTRY_SRC_ID,
        COALESCE('sa_sales', (SELECT SOURCE_SYSTEM FROM BL_3NF.CE_COUNTRIES c WHERE c.COUNTRY_ID = -1)) AS SOURCE_SYSTEM,
        COALESCE(cte2.SOURCE_TABLE, (SELECT SOURCE_TABLE FROM BL_3NF.CE_COUNTRIES c WHERE c.COUNTRY_ID = -1)) AS SOURCE_TABLE,
        COALESCE(UPPER(cte2.COUNTRY_NAME), (SELECT COUNTRY_NAME FROM BL_3NF.CE_COUNTRIES c WHERE c.COUNTRY_ID = -1)) AS COUNTRY_NAME,
        COALESCE(cte2.REGION_ID, (SELECT REGION_ID FROM BL_3NF.CE_COUNTRIES c WHERE c.COUNTRY_ID = -1)) AS REGION_ID,
        COALESCE(CURRENT_DATE, (SELECT UPDATE_DT FROM BL_3NF.CE_COUNTRIES c WHERE c.COUNTRY_ID = -1)) AS UPDATE_DT
    FROM cte2
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_3NF.CE_COUNTRIES c
        WHERE UPPER(cte2.COUNTRY_NAME) = UPPER(c.COUNTRY_NAME)
        AND UPPER(c.COUNTRY_SRC_ID) = UPPER(cte2.ORDER_ID::TEXT)
        AND UPPER(c.SOURCE_SYSTEM) = UPPER('SA_SALES')
        AND UPPER(c.SOURCE_TABLE) IN (UPPER('src_offline_sales'),UPPER('src_online_sales'))
    );
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT; 
    log_message := 'Procedure LD_CE_COUNTRIES completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('LD_CE_COUNTRIES', num_rows_affected, log_message);

EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in LD_CE_COUNTRIES: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('LD_CE_COUNTRIES', log_message);
        RAISE;
END;
$$;






CREATE OR REPLACE PROCEDURE BL_3NF.LD_CE_CITIES()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer; log_message TEXT;
BEGIN
    WITH cte AS (
        SELECT DISTINCT STORE_CITY AS CITY_NAME, STORE_COUNTRY AS COUNTRY_NAME, MIN(ORDER_ID) AS ORDER_ID, MIN(SOURCE_TABLE) AS SOURCE_TABLE
        FROM (SELECT STORE_CITY, STORE_COUNTRY, ORDER_ID, 'src_offline_sales' AS SOURCE_TABLE FROM sa_sales.src_offline_sales
            UNION ALL
            SELECT STORE_CITY, STORE_COUNTRY, ORDER_ID, 'src_online_sales' AS SOURCE_TABLE FROM sa_sales.src_online_sales
        ) AS sq1
        GROUP BY CITY_NAME, COUNTRY_NAME
    ), cte2 AS (
        SELECT cte.CITY_NAME, cc.COUNTRY_ID, cte.ORDER_ID, cte.SOURCE_TABLE
        FROM cte
        LEFT JOIN BL_3NF.CE_COUNTRIES cc ON UPPER(cte.COUNTRY_NAME) = UPPER(cc.COUNTRY_NAME)
        AND UPPER(cc.SOURCE_SYSTEM) = UPPER('sa_sales') AND UPPER(cc.SOURCE_TABLE) =  UPPER(cte.SOURCE_TABLE)

    )
    INSERT INTO BL_3NF.CE_CITIES
        (CITY_ID, CITY_SRC_ID, SOURCE_SYSTEM, SOURCE_TABLE, CITY_NAME, COUNTRY_ID, UPDATE_DT)
    SELECT
        NEXTVAL('bl_3nf.cities_seq') AS CITY_ID,
        COALESCE(cte2.ORDER_ID::text, (SELECT CITY_SRC_ID FROM BL_3NF.CE_CITIES c WHERE c.CITY_ID = -1)) AS CITY_SRC_ID,
        COALESCE('sa_sales', (SELECT SOURCE_SYSTEM FROM BL_3NF.CE_CITIES c WHERE c.CITY_ID = -1)) AS SOURCE_SYSTEM,
        COALESCE(cte2.SOURCE_TABLE, (SELECT SOURCE_TABLE FROM BL_3NF.CE_CITIES c WHERE c.CITY_ID = -1)) AS SOURCE_TABLE,
        COALESCE(UPPER(cte2.CITY_NAME), (SELECT CITY_NAME FROM BL_3NF.CE_CITIES c WHERE c.CITY_ID = -1)) AS CITY_NAME,
        COALESCE(cte2.COUNTRY_ID, (SELECT COUNTRY_ID FROM BL_3NF.CE_CITIES c WHERE c.CITY_ID = -1)) AS COUNTRY_ID,
        COALESCE(CURRENT_DATE, (SELECT UPDATE_DT FROM BL_3NF.CE_CITIES c WHERE c.CITY_ID = -1)) AS UPDATE_DT
    FROM cte2
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_3NF.CE_CITIES c
        WHERE UPPER(cte2.CITY_NAME) = UPPER(c.CITY_NAME)
        AND UPPER(c.CITY_SRC_ID) = UPPER(cte2.ORDER_ID::TEXT)
        AND UPPER(c.SOURCE_SYSTEM) = UPPER('SA_SALES')
        AND UPPER(c.SOURCE_TABLE) IN (UPPER('src_offline_sales'),UPPER('src_online_sales'))
    );
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT; 
    log_message := 'Procedure LD_CE_CITIES completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('LD_CE_CITIES', num_rows_affected, log_message);

EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in LD_CE_CITIES: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('LD_CE_CITIES', log_message);
        RAISE;
END;
$$;






CREATE OR REPLACE PROCEDURE BL_3NF.LD_CE_ADDRESSES()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer; log_message TEXT;
BEGIN
    WITH cte AS (
        SELECT DISTINCT STORE_ADDRESS AS ADDRESS_NAME, STORE_CITY AS CITY_NAME, MIN(ORDER_ID) AS ORDER_ID, MIN(SOURCE_TABLE) AS SOURCE_TABLE
        FROM (SELECT STORE_ADDRESS, STORE_CITY, ORDER_ID, 'src_offline_sales' AS SOURCE_TABLE FROM sa_sales.src_offline_sales
            UNION ALL
            SELECT STORE_ADDRESS, STORE_CITY, ORDER_ID, 'src_online_sales' AS SOURCE_TABLE FROM sa_sales.src_online_sales
        ) AS sq1
        GROUP BY ADDRESS_NAME, CITY_NAME
    ), cte2 AS (
        SELECT cte.ADDRESS_NAME, cc.CITY_ID, cte.ORDER_ID, cte.SOURCE_TABLE
        FROM cte
        LEFT JOIN BL_3NF.CE_CITIES cc ON UPPER(cte.CITY_NAME) = UPPER(cc.CITY_NAME)
        AND UPPER(cc.SOURCE_SYSTEM) = UPPER('sa_sales') AND UPPER(cc.SOURCE_TABLE) =  UPPER(cte.SOURCE_TABLE)

    )
    INSERT INTO BL_3NF.CE_ADDRESSES
        (ADDRESS_ID, ADDRESS_SRC_ID, SOURCE_SYSTEM, SOURCE_TABLE, ADDRESS_NAME, CITY_ID, UPDATE_DT)
    SELECT
        NEXTVAL('bl_3nf.addresses_seq') AS ADDRESS_ID,
        COALESCE(cte2.ORDER_ID::text, (SELECT ADDRESS_SRC_ID FROM BL_3NF.CE_ADDRESSES a WHERE a.ADDRESS_ID = -1)) AS ADDRESS_SRC_ID,
        COALESCE('sa_sales', (SELECT SOURCE_SYSTEM FROM BL_3NF.CE_ADDRESSES a WHERE a.ADDRESS_ID = -1)) AS SOURCE_SYSTEM,
        COALESCE(cte2.SOURCE_TABLE, (SELECT SOURCE_TABLE FROM BL_3NF.CE_ADDRESSES a WHERE a.ADDRESS_ID = -1)) AS SOURCE_TABLE,
        COALESCE(UPPER(cte2.ADDRESS_NAME), (SELECT ADDRESS_NAME FROM BL_3NF.CE_ADDRESSES a WHERE a.ADDRESS_ID = -1)) AS ADDRESS_NAME,
        COALESCE(cte2.CITY_ID, (SELECT CITY_ID FROM BL_3NF.CE_ADDRESSES a WHERE a.ADDRESS_ID = -1)) AS CITY_ID,
        COALESCE(CURRENT_DATE, (SELECT UPDATE_DT FROM BL_3NF.CE_ADDRESSES a WHERE a.ADDRESS_ID = -1)) AS UPDATE_DT
    FROM cte2
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_3NF.CE_ADDRESSES a
        WHERE UPPER(cte2.ADDRESS_NAME) = UPPER(a.ADDRESS_NAME)
        AND UPPER(a.ADDRESS_SRC_ID) = UPPER(cte2.ORDER_ID::TEXT)
        AND UPPER(a.SOURCE_SYSTEM) = UPPER('SA_SALES')
        AND UPPER(a.SOURCE_TABLE) IN (UPPER('src_offline_sales'),UPPER('src_online_sales'))
    );
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT; 
    log_message := 'Procedure LD_CE_ADDRESSES completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('LD_CE_ADDRESSES', num_rows_affected, log_message);

EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in LD_CE_ADDRESSES: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('LD_CE_ADDRESSES', log_message);
        RAISE;
END;
$$;




CREATE OR REPLACE PROCEDURE BL_3NF.LD_CE_STORE_SIZES()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer; log_message TEXT;
BEGIN
WITH cte AS (
    SELECT
        DISTINCT STORE_SIZE AS STORE_SIZE_NAME,
        STORE_SIZE_DESCRIPTION, MIN(ORDER_ID) AS ORDER_ID, 'src_offline_sales' AS SOURCE_TABLE
	 FROM sa_sales.src_offline_sales
	 GROUP BY STORE_SIZE_NAME, STORE_SIZE_DESCRIPTION
)
INSERT INTO BL_3NF.CE_STORE_SIZES
    (STORE_SIZE_ID,
    STORE_SIZE_SRC_ID,
    SOURCE_SYSTEM,
    SOURCE_TABLE,
    STORE_SIZE_NAME,
    STORE_SIZE_DESCRIPTION,
    UPDATE_DT)
SELECT
    NEXTVAL('bl_3nf.store_sizes_seq') AS STORE_SIZE_ID,
    COALESCE(cte.ORDER_ID::text, (SELECT STORE_SIZE_SRC_ID FROM BL_3NF.CE_STORE_SIZES ss WHERE ss.STORE_SIZE_ID = -1)) AS STORE_SIZE_SRC_ID,
    COALESCE('sa_sales',(SELECT SOURCE_SYSTEM FROM BL_3NF.CE_STORES_SCD ss WHERE ss.STORE_ID = -1)) AS SOURCE_SYSTEM,
    COALESCE(cte.SOURCE_TABLE, (SELECT SOURCE_TABLE FROM BL_3NF.CE_STORE_SIZES ss WHERE ss.STORE_SIZE_ID = -1)) AS SOURCE_TABLE,
    COALESCE(UPPER(cte.STORE_SIZE_NAME), (SELECT STORE_SIZE_NAME FROM BL_3NF.CE_STORE_SIZES ss WHERE ss.STORE_SIZE_ID = -1)) AS STORE_SIZE_NAME,
    COALESCE(cte.STORE_SIZE_DESCRIPTION, (SELECT STORE_SIZE_DESCRIPTION FROM BL_3NF.CE_STORE_SIZES ss WHERE ss.STORE_SIZE_ID = -1)) AS STORE_SIZE_DESCRIPTION,
    COALESCE(CURRENT_DATE, (SELECT UPDATE_DT FROM BL_3NF.CE_STORE_SIZES ss WHERE ss.STORE_SIZE_ID = -1)) AS UPDATE_DT
FROM
    cte
WHERE NOT EXISTS (
    SELECT 1
    FROM BL_3NF.CE_STORE_SIZES ss
    WHERE UPPER(cte.STORE_SIZE_NAME) = UPPER(ss.STORE_SIZE_NAME)
    AND UPPER(ss.STORE_SIZE_SRC_ID) = UPPER(cte.ORDER_ID::TEXT)
    AND UPPER(ss.SOURCE_SYSTEM) = UPPER('SA_SALES')
    AND UPPER(ss.SOURCE_TABLE) IN (UPPER('src_offline_sales'),UPPER('src_online_sales'))
);
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT; 
    log_message := 'Procedure LD_CE_STORE_SIZES completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('LD_CE_STORE_SIZES', num_rows_affected, log_message);

EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in LD_CE_STORE_SIZES: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('LD_CE_STORE_SIZES', log_message);
        RAISE;
END;
$$;



CREATE OR REPLACE PROCEDURE BL_3NF.LD_CE_STORES_SCD()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer := 0;
    num_rows integer;
    log_message TEXT;
BEGIN
	CREATE TEMP TABLE temp_table AS
	    WITH cte AS (
	    SELECT DISTINCT STORE_SIZE AS STORE_SIZE_NAME, STORE_ADDRESS AS ADDRESS_NAME, MIN(ORDER_ID) AS ORDER_ID, MIN(SOURCE_TABLE) AS SOURCE_TABLE
	    FROM (SELECT STORE_SIZE, STORE_ADDRESS, ORDER_ID, 'src_offline_sales' AS SOURCE_TABLE FROM sa_sales.src_offline_sales
	    ) AS sq1
	    GROUP BY STORE_SIZE_NAME, ADDRESS_NAME
	), cte2 AS (
	    SELECT NEXTVAL('bl_3nf.stores_seq') AS STORE_ID, css.STORE_SIZE_ID, ca.ADDRESS_ID, cte.ORDER_ID, cte.SOURCE_TABLE
	    FROM cte
	    LEFT JOIN bl_3nf.CE_STORE_SIZES css ON UPPER(cte.STORE_SIZE_NAME) = UPPER(css.STORE_SIZE_NAME)
        AND UPPER(css.SOURCE_SYSTEM) = UPPER('sa_sales') AND UPPER(css.SOURCE_TABLE) =  UPPER(cte.SOURCE_TABLE)
	    LEFT JOIN bl_3nf.CE_ADDRESSES ca ON UPPER(cte.ADDRESS_NAME) = UPPER(ca.ADDRESS_NAME)
        AND UPPER(ca.SOURCE_SYSTEM) = UPPER('sa_sales') AND UPPER(ca.SOURCE_TABLE) =  UPPER(cte.SOURCE_TABLE)

	) SELECT * FROM cte2;
	
    INSERT INTO BL_3NF.CE_STORES_SCD
        (STORE_ID,
        STORE_SRC_ID,
        SOURCE_SYSTEM,
        SOURCE_TABLE,
        STORE_ADDRESS_ID,
        STORE_SIZE_ID,
        START_DT,
        END_DT,
        IS_ACTIVE,
        INSERT_DT)
    SELECT
	    temp_table.STORE_ID AS STORE_ID,
	    COALESCE(temp_table.ORDER_ID::text, (SELECT STORE_SRC_ID FROM BL_3NF.CE_STORES_SCD ss WHERE ss.STORE_ID = -1)) AS STORE_SRC_ID,
	    COALESCE('sa_sales',(SELECT SOURCE_SYSTEM FROM BL_3NF.CE_STORES_SCD ss WHERE ss.STORE_ID = -1)) AS SOURCE_SYSTEM,
	    COALESCE(temp_table.SOURCE_TABLE, (SELECT SOURCE_TABLE FROM BL_3NF.CE_STORES_SCD ss WHERE ss.STORE_ID = -1)) AS SOURCE_TABLE,
	    COALESCE(temp_table.ADDRESS_ID, (SELECT ADDRESS_ID FROM BL_3NF.CE_STORES_SCD ss WHERE ss.STORE_ID = -1)) AS ADDRESS_ID,
	    COALESCE(temp_table.STORE_SIZE_ID, (SELECT STORE_SIZE_ID FROM BL_3NF.CE_STORES_SCD ss WHERE ss.STORE_ID = -1)) AS STORE_SIZE_ID,
	    (SELECT START_DT FROM BL_3NF.CE_STORES_SCD ss WHERE ss.STORE_ID = -1) AS START_DT,
	    (SELECT END_DT FROM BL_3NF.CE_STORES_SCD ss WHERE ss.STORE_ID = -1) AS END_DT,
	    COALESCE('Y',(SELECT IS_ACTIVE FROM BL_3NF.CE_STORES_SCD ss WHERE ss.STORE_ID = -1)) AS IS_ACTIVE,
	    current_date AS INSERT_DT
    FROM temp_table
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_3NF.CE_STORES_SCD ss
        WHERE temp_table.ADDRESS_ID = ss.STORE_ADDRESS_ID
        AND UPPER(ss.STORE_SRC_ID) = UPPER(temp_table.ORDER_ID::TEXT)
    	AND UPPER(ss.SOURCE_SYSTEM) = UPPER('SA_SALES')
    	AND UPPER(ss.SOURCE_TABLE) IN (UPPER('src_offline_sales'),UPPER('src_online_sales'))
    );
    GET DIAGNOSTICS num_rows = ROW_COUNT;
	num_rows_affected := num_rows_affected + num_rows;


    UPDATE BL_3NF.CE_STORES_SCD
    SET IS_ACTIVE = 'N', END_DT = current_date
    WHERE EXISTS (
        SELECT 1
        FROM temp_table
        WHERE temp_table.ADDRESS_ID = CE_STORES_SCD.STORE_ADDRESS_ID
        AND temp_table.STORE_SIZE_ID <> CE_STORES_SCD.STORE_SIZE_ID
        AND CE_STORES_SCD.IS_ACTIVE = 'Y'
        AND UPPER(CE_STORES_SCD.STORE_SRC_ID) = UPPER(temp_table.ORDER_ID::TEXT)
        AND UPPER(CE_STORES_SCD.SOURCE_SYSTEM) = UPPER('SA_SALES')
        AND UPPER(CE_STORES_SCD.SOURCE_TABLE) IN (UPPER('src_offline_sales'),UPPER('src_online_sales'))
    );
    GET DIAGNOSTICS num_rows = ROW_COUNT;
	num_rows_affected := num_rows_affected + num_rows;

    INSERT INTO BL_3NF.CE_STORES_SCD
        (STORE_ID,
        STORE_SRC_ID,
        SOURCE_SYSTEM,
        SOURCE_TABLE,
        STORE_ADDRESS_ID,
        STORE_SIZE_ID,
        START_DT,
        END_DT,
        IS_ACTIVE,
        INSERT_DT)
    SELECT
	    (SELECT max(css.STORE_ID) 
	        FROM BL_3NF.CE_STORES_SCD css
	        LEFT JOIN temp_table tt ON css.store_address_id = tt.ADDRESS_ID
	        WHERE css.store_size_id <> tt.store_size_id AND  IS_ACTIVE = 'N') AS STORE_ID,
	    COALESCE(temp_table.ORDER_ID::text, (SELECT STORE_SRC_ID FROM BL_3NF.CE_STORES_SCD ss WHERE ss.STORE_ID = -1)) AS STORE_SRC_ID,
	    COALESCE('sa_sales',(SELECT SOURCE_SYSTEM FROM BL_3NF.CE_STORES_SCD ss WHERE ss.STORE_ID = -1)) AS SOURCE_SYSTEM,
	    COALESCE(temp_table.SOURCE_TABLE, (SELECT SOURCE_TABLE FROM BL_3NF.CE_STORES_SCD ss WHERE ss.STORE_ID = -1)) AS SOURCE_TABLE,
	    COALESCE(temp_table.ADDRESS_ID, (SELECT ADDRESS_ID FROM BL_3NF.CE_STORES_SCD ss WHERE ss.STORE_ID = -1)) AS ADDRESS_ID,
	    COALESCE(temp_table.STORE_SIZE_ID, (SELECT STORE_SIZE_ID FROM BL_3NF.CE_STORES_SCD ss WHERE ss.STORE_ID = -1)) AS STORE_SIZE_ID,
	    current_date AS START_DT,
	    (SELECT END_DT FROM BL_3NF.CE_STORES_SCD ss WHERE ss.STORE_ID = -1) AS END_DT,
	    COALESCE('Y',(SELECT IS_ACTIVE FROM BL_3NF.CE_STORES_SCD ss WHERE ss.STORE_ID = -1)) AS IS_ACTIVE,
	    current_date AS INSERT_DT
    FROM temp_table
    WHERE EXISTS (
        SELECT *
        FROM BL_3NF.CE_STORES_SCD ss
        WHERE temp_table.ADDRESS_ID = ss.STORE_ADDRESS_ID
        AND temp_table.STORE_SIZE_ID <> ss.STORE_SIZE_ID
        AND ss.IS_ACTIVE = 'N'
        AND UPPER(ss.STORE_SRC_ID) = UPPER(temp_table.ORDER_ID::TEXT)
        AND UPPER(ss.SOURCE_SYSTEM) = UPPER('SA_SALES')
        AND UPPER(ss.SOURCE_TABLE) IN (UPPER('src_offline_sales'),UPPER('src_online_sales'))
    ) AND NOT EXISTS (
   	    SELECT 1
        FROM BL_3NF.CE_STORES_SCD ss
        WHERE temp_table.ADDRESS_ID = ss.STORE_ADDRESS_ID
        AND ss.IS_ACTIVE = 'Y'
        AND UPPER(ss.STORE_SRC_ID) = UPPER(temp_table.ORDER_ID::TEXT)
        AND UPPER(ss.SOURCE_SYSTEM) = UPPER('SA_SALES')
        AND UPPER(ss.SOURCE_TABLE) IN (UPPER('src_offline_sales'),UPPER('src_online_sales'))
    );

    GET DIAGNOSTICS num_rows = ROW_COUNT;
	num_rows_affected := num_rows_affected + num_rows;    

    log_message := 'Procedure LD_CE_STORES_SCD completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message)
    VALUES ('LD_CE_STORES_SCD', num_rows_affected, log_message);
	
    DROP TABLE temp_table;

    EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in LD_CE_STORES_SCD: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message)
        VALUES ('LD_CE_STORES_SCD', log_message);
        RAISE;
END;
$$;






CREATE OR REPLACE PROCEDURE LD_CE_SALES(p_year INT DEFAULT NULL, p_month INT DEFAULT NULL)
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer := 0;
    num_rows integer;
    log_message TEXT;
    offline_table_name TEXT;
    online_table_name TEXT;
BEGIN
	IF p_year IS NULL OR p_month IS NULL THEN
		offline_table_name := 'src_offline_sales';
    	online_table_name := 'src_online_sales';
	ELSE 
    	offline_table_name := 'src_offline_sales_' || p_year || '_' || LPAD(p_month::TEXT, 2, '0');
    	online_table_name := 'src_online_sales_' || p_year || '_' || LPAD(p_month::TEXT, 2, '0');
	END IF;
	EXECUTE '
    WITH cte AS (
    SELECT 
        ORDER_ID, SALES_CHANNEL, STORE_ADDRESS, ITEM_TYPE, ITEM, 
        ''n.a'' AS ORDERING_WAY, ORDER_PRIORITY, ORDER_DATE,
        PAYMENT_METHOD, CUSTOMER_TYPE, PROMOTION_TYPE, UNITS_SOLD, UNIT_PRICE, UNIT_COST
    FROM sa_sales.'|| quote_ident(offline_table_name) ||' ofs 
    UNION ALL
    SELECT 
        ORDER_ID, SALES_CHANNEL, STORE_ADDRESS, ITEM_TYPE, ITEM, 
        ORDERING_WAY, ORDER_PRIORITY, ORDER_DATE,
        PAYMENT_METHOD, CUSTOMER_TYPE, PROMOTION_TYPE, UNITS_SOLD, UNIT_PRICE, UNIT_COST
    FROM sa_sales.'|| quote_ident(online_table_name) ||' ons 
    ), cte2 AS (
	SELECT cte.ORDER_ID, csc.SALES_CHANNEL_ID, css.STORE_ID, ci.ITEM_ID, cow.ORDERING_WAY_ID,
	cop.ORDER_PRIORITY_ID, cte.ORDER_DATE, cpm.PAYMENT_METHOD_ID, cct.CUSTOMER_TYPE_ID,
	cpt.PROMOTION_TYPE_ID, cpt.SALE_PERCENTAGE, cte.UNITS_SOLD, cte.UNIT_PRICE, cte.UNIT_COST
	FROM cte 
	JOIN bl_3nf.CE_SALES_CHANNELS csc ON UPPER(cte.SALES_CHANNEL) = UPPER(csc.SALES_CHANNEL_NAME)
	JOIN bl_3nf.CE_ADDRESSES ca ON UPPER(cte.STORE_ADDRESS) = UPPER(ca.ADDRESS_NAME)
	JOIN bl_3nf.CE_STORES_SCD css ON ca.ADDRESS_ID = css.STORE_ADDRESS_ID
	JOIN bl_3nf.CE_ITEMS ci ON UPPER(cte.ITEM) = UPPER(ci.ITEM_NAME) AND ci.ITEM_TYPE_ID = 
	(SELECT ITEM_TYPE_ID FROM bl_3nf.ce_item_types cit WHERE UPPER(ITEM_TYPE_NAME) = UPPER(cte.ITEM_TYPE))
	JOIN bl_3nf.CE_ORDERING_WAYS cow ON UPPER(cte.ORDERING_WAY) = UPPER(cow.ORDERING_WAY_NAME)
	JOIN bl_3nf.CE_ORDER_PRIORITIES cop ON UPPER(cte.ORDER_PRIORITY) = UPPER(cop.ORDER_PRIORITY_NAME)
	JOIN bl_3nf.CE_PAYMENT_METHODS cpm ON UPPER(cte.PAYMENT_METHOD) = UPPER(cpm.PAYMENT_METHOD_NAME)
	JOIN bl_3nf.CE_CUSTOMER_TYPES cct ON UPPER(cte.CUSTOMER_TYPE) = UPPER(cct.CUSTOMER_TYPE_NAME)
	JOIN bl_3nf.CE_PROMOTION_TYPES cpt ON UPPER(cte.PROMOTION_TYPE) = UPPER(cpt.PROMOTION_TYPE_NAME)
	)
	INSERT INTO bl_3nf.CE_SALES
	(SALE_ID, SALES_CHANNEL_ID, STORE_ID, ITEM_ID, ORDERING_WAY_ID,
	ORDER_PRIORITY_ID, ORDER_DATE, PAYMENT_METHOD_ID,
	CUSTOMER_TYPE_ID, PROMOTION_TYPE_ID, SALE_PERCENTAGE,
	UNITS_SOLD, UNIT_PRICE, UNIT_COST)
	SELECT 
	ORDER_ID AS SALE_ID, 
	SALES_CHANNEL_ID,
	STORE_ID,
	ITEM_ID,
	ORDERING_WAY_ID,
	ORDER_PRIORITY_ID,
	ORDER_DATE,
	PAYMENT_METHOD_ID,
	CUSTOMER_TYPE_ID,
	PROMOTION_TYPE_ID,
	SALE_PERCENTAGE,
	COALESCE(UNITS_SOLD,0) AS UNITS_SOLD,
	COALESCE(UNIT_PRICE,0) AS UNIT_PRICE,
	COALESCE(UNIT_COST,0) AS UNIT_COST
	FROM cte2
	WHERE NOT EXISTS (
	    SELECT 1
	    FROM BL_3NF.CE_SALES cs
	    WHERE cte2.ORDER_ID = cs.SALE_ID
	)';
    GET DIAGNOSTICS num_rows = ROW_COUNT;
	num_rows_affected := num_rows_affected + num_rows;    

    log_message := 'Procedure LD_CE_SALES completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message)
    VALUES ('LD_CE_SALES', num_rows_affected, log_message);
	
    EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in LD_CE_SALES: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message)
        VALUES ('LD_CE_SALES', log_message);
        RAISE;
END;
$$;




CREATE OR REPLACE PROCEDURE BL_3NF.LOAD_ALL_BL_3NF_TABLES()
LANGUAGE plpgsql
AS $$
BEGIN
	CALL BL_3NF.LD_CE_ORDER_PRIORITIES();
	CALL BL_3NF.LD_CE_PROMOTION_TYPES();
	CALL BL_3NF.LD_CE_CUSTOMER_TYPES();
	CALL BL_3NF.LD_CE_PAYMENT_METHODS();
	CALL BL_3NF.LD_CE_SALES_CHANNELS();
	CALL BL_3NF.LD_CE_ORDERING_WAYS();
	CALL BL_3NF.LD_CE_ITEM_CATEGORIES();
	CALL BL_3NF.LD_CE_ITEM_TYPES();
	CALL BL_3NF.LD_CE_ITEMS();
	CALL BL_3NF.LD_CE_REGIONS();
	CALL BL_3NF.LD_CE_COUNTRIES();
	CALL BL_3NF.LD_CE_CITIES();
	CALL BL_3NF.LD_CE_ADDRESSES();
	CALL BL_3NF.LD_CE_STORE_SIZES();
	CALL BL_3NF.LD_CE_STORES_SCD();

    INSERT INTO sa_sales.log_table (procedure_name, log_message)
    VALUES ('LOAD_ALL_BL_3NF_TABLES', 'All procedures completed successfully.');
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Error in LOAD_ALL_BL_3NF_TABLES: %', SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message)
        VALUES ('LOAD_ALL_BL_3NF_TABLES', 'Error: ' || SQLERRM);
        RAISE;
END;
$$;



CALL LOAD_ALL_BL_3NF_TABLES();
CALL BL_3NF.LD_CE_SALES(2022,1);




COMMIT;

