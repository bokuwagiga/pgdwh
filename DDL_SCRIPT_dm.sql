CREATE SCHEMA IF NOT EXISTS bl_dm;

SET search_path = bl_dm;


CREATE OR REPLACE PROCEDURE BL_DM.CREATE_TABLE_DIM_CUSTOMER_TYPES()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer;
    log_message TEXT;
BEGIN
    CREATE SEQUENCE IF NOT EXISTS BL_DM.DIM_CUSTOMER_TYPES_SEQ
        INCREMENT BY 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        START 1
        CACHE 1
        NO CYCLE;

    CREATE TABLE IF NOT EXISTS BL_DM.DIM_CUSTOMER_TYPES (
        CUSTOMER_TYPE_SURR_ID BIGINT PRIMARY KEY,
        CUSTOMER_TYPE_SRC_ID VARCHAR(32),
        SOURCE_SYSTEM VARCHAR(32),
        SOURCE_TABLE VARCHAR(255),
        CUSTOMER_TYPE_NAME VARCHAR(255),
        CUSTOMER_TYPE_DESCRIPTION VARCHAR(255),
        INSERT_DT DATE,
        UPDATE_DT DATE
    );

    INSERT INTO BL_DM.DIM_CUSTOMER_TYPES
        (CUSTOMER_TYPE_SURR_ID,
        CUSTOMER_TYPE_SRC_ID,
        SOURCE_SYSTEM,
        SOURCE_TABLE,
        CUSTOMER_TYPE_NAME,
        CUSTOMER_TYPE_DESCRIPTION,
        INSERT_DT,
        UPDATE_DT)
    SELECT
        -1 AS CUSTOMER_TYPE_SURR_ID,
        'n.a' AS CUSTOMER_TYPE_SRC_ID,
        'MANUAL' AS SOURCE_SYSTEM,
        'MANUAL' AS SOURCE_TABLE,
        'n.a' AS CUSTOMER_TYPE_NAME,
        'n.a' AS CUSTOMER_TYPE_DESCRIPTION,
        '1900-01-01' AS INSERT_DT,
        '1900-01-01' AS UPDATE_DT
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_DM.DIM_CUSTOMER_TYPES
        WHERE CUSTOMER_TYPE_SURR_ID = -1
    );
    
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT;
    log_message := 'Procedure CREATE_TABLE_DIM_CUSTOMER_TYPES completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('CREATE_TABLE_DIM_CUSTOMER_TYPES', num_rows_affected, log_message);
    
EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in CREATE_TABLE_DIM_CUSTOMER_TYPES: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('CREATE_TABLE_DIM_CUSTOMER_TYPES', log_message);
        RAISE;
END;
$$;






CREATE OR REPLACE PROCEDURE BL_DM.CREATE_TABLE_DIM_PAYMENT_METHODS()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer;
    log_message TEXT;
BEGIN
    CREATE SEQUENCE IF NOT EXISTS BL_DM.DIM_PAYMENT_METHODS_SEQ
        INCREMENT BY 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        START 1
        CACHE 1
        NO CYCLE;

    CREATE TABLE IF NOT EXISTS BL_DM.DIM_PAYMENT_METHODS (
        PAYMENT_METHOD_SURR_ID BIGINT PRIMARY KEY,
        PAYMENT_METHOD_SRC_ID VARCHAR(32),
        SOURCE_SYSTEM VARCHAR(32),
        SOURCE_TABLE VARCHAR(255),
        PAYMENT_METHOD_NAME VARCHAR(255),
        PAYMENT_METHOD_DESCRIPTION VARCHAR(255),
        INSERT_DT DATE,
        UPDATE_DT DATE
    );

    INSERT INTO BL_DM.DIM_PAYMENT_METHODS
        (PAYMENT_METHOD_SURR_ID,
        PAYMENT_METHOD_SRC_ID,
        SOURCE_SYSTEM,
        SOURCE_TABLE,
        PAYMENT_METHOD_NAME,
        PAYMENT_METHOD_DESCRIPTION,
        INSERT_DT,
        UPDATE_DT)
    SELECT
        -1 AS PAYMENT_METHOD_SURR_ID,
        'n.a' AS PAYMENT_METHOD_SRC_ID,
        'MANUAL' AS SOURCE_SYSTEM,
        'MANUAL' AS SOURCE_TABLE,
        'n.a' AS PAYMENT_METHOD_NAME,
        'n.a' AS PAYMENT_METHOD_DESCRIPTION,
        '1900-01-01' AS INSERT_DT,
        '1900-01-01' AS UPDATE_DT
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_DM.DIM_PAYMENT_METHODS
        WHERE PAYMENT_METHOD_SURR_ID = -1
    );
    
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT;
    log_message := 'Procedure CREATE_TABLE_DIM_PAYMENT_METHODS completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('CREATE_TABLE_DIM_PAYMENT_METHODS', num_rows_affected, log_message);
    
EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in CREATE_TABLE_DIM_PAYMENT_METHODS: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('CREATE_TABLE_DIM_PAYMENT_METHODS', log_message);
        RAISE;
END;
$$;




CREATE OR REPLACE PROCEDURE BL_DM.CREATE_TABLE_DIM_ORDERING_WAYS()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer;
    log_message TEXT;
BEGIN
    CREATE SEQUENCE IF NOT EXISTS BL_DM.DIM_ORDERING_WAYS_SEQ
        INCREMENT BY 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        START 1
        CACHE 1
        NO CYCLE;

    CREATE TABLE IF NOT EXISTS BL_DM.DIM_ORDERING_WAYS (
        ORDERING_WAY_SURR_ID BIGINT PRIMARY KEY,
        ORDERING_WAY_SRC_ID VARCHAR(32),
        SOURCE_SYSTEM VARCHAR(32),
        SOURCE_TABLE VARCHAR(255),
        ORDERING_WAY_NAME VARCHAR(255),
        ORDERING_WAY_DESCRIPTION VARCHAR(255),
        INSERT_DT DATE,
        UPDATE_DT DATE
    );

    INSERT INTO BL_DM.DIM_ORDERING_WAYS
        (ORDERING_WAY_SURR_ID,
        ORDERING_WAY_SRC_ID,
        SOURCE_SYSTEM,
        SOURCE_TABLE,
        ORDERING_WAY_NAME,
        ORDERING_WAY_DESCRIPTION,
        INSERT_DT,
        UPDATE_DT)
    SELECT
        -1 AS ORDERING_WAY_SURR_ID,
        'n.a' AS ORDERING_WAY_SRC_ID,
        'MANUAL' AS SOURCE_SYSTEM,
        'MANUAL' AS SOURCE_TABLE,
        'n.a' AS ORDERING_WAY_NAME,
        'n.a' AS ORDERING_WAY_DESCRIPTION,
        '1900-01-01' AS INSERT_DT,
        '1900-01-01' AS UPDATE_DT
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_DM.DIM_ORDERING_WAYS
        WHERE ORDERING_WAY_SURR_ID = -1
    );
    
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT;
    log_message := 'Procedure CREATE_TABLE_DIM_ORDERING_WAYS completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('CREATE_TABLE_DIM_ORDERING_WAYS', num_rows_affected, log_message);
    
EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in CREATE_TABLE_DIM_ORDERING_WAYS: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('CREATE_TABLE_DIM_ORDERING_WAYS', log_message);
        RAISE;
END;
$$;







CREATE OR REPLACE PROCEDURE BL_DM.CREATE_TABLE_DIM_SALES_CHANNELS()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer;
    log_message TEXT;
BEGIN
    CREATE SEQUENCE IF NOT EXISTS BL_DM.DIM_SALES_CHANNELS_SEQ
        INCREMENT BY 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        START 1
        CACHE 1
        NO CYCLE;

    CREATE TABLE IF NOT EXISTS BL_DM.DIM_SALES_CHANNELS (
        SALES_CHANNEL_SURR_ID BIGINT PRIMARY KEY,
        SALES_CHANNEL_SRC_ID VARCHAR(32),
        SOURCE_SYSTEM VARCHAR(32),
        SOURCE_TABLE VARCHAR(255),
        SALES_CHANNEL_NAME VARCHAR(255),
        INSERT_DT DATE,
        UPDATE_DT DATE
    );

    INSERT INTO BL_DM.DIM_SALES_CHANNELS
        (SALES_CHANNEL_SURR_ID,
        SALES_CHANNEL_SRC_ID,
        SOURCE_SYSTEM,
        SOURCE_TABLE,
        SALES_CHANNEL_NAME,
        INSERT_DT,
        UPDATE_DT)
    SELECT
        -1 AS SALES_CHANNEL_SURR_ID,
        'n.a' AS SALES_CHANNEL_SRC_ID,
        'MANUAL' AS SOURCE_SYSTEM,
        'MANUAL' AS SOURCE_TABLE,
        'n.a' AS SALES_CHANNEL_NAME,
        '1900-01-01' AS INSERT_DT,
        '1900-01-01' AS UPDATE_DT
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_DM.DIM_SALES_CHANNELS
        WHERE SALES_CHANNEL_SURR_ID = -1
    );
    
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT;
    log_message := 'Procedure CREATE_TABLE_DIM_SALES_CHANNELS completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('CREATE_TABLE_DIM_SALES_CHANNELS', num_rows_affected, log_message);
    
EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in CREATE_TABLE_DIM_SALES_CHANNELS: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('CREATE_TABLE_DIM_SALES_CHANNELS', log_message);
        RAISE;
END;
$$;








CREATE OR REPLACE PROCEDURE BL_DM.CREATE_TABLE_DIM_PROMOTION_TYPES()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer;
    log_message TEXT;
BEGIN
    CREATE SEQUENCE IF NOT EXISTS BL_DM.DIM_PROMOTION_TYPES_SEQ
        INCREMENT BY 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        START 1
        CACHE 1
        NO CYCLE;

    CREATE TABLE IF NOT EXISTS BL_DM.DIM_PROMOTION_TYPES (
        PROMOTION_TYPE_SURR_ID BIGINT PRIMARY KEY,
        PROMOTION_TYPE_SRC_ID VARCHAR(32),
        SOURCE_SYSTEM VARCHAR(32),
        SOURCE_TABLE VARCHAR(255),
        PROMOTION_TYPE_NAME VARCHAR(255),
        SALE_PERCENTAGE DECIMAL(4, 2),
        INSERT_DT DATE,
        UPDATE_DT DATE
    );

    INSERT INTO BL_DM.DIM_PROMOTION_TYPES
        (PROMOTION_TYPE_SURR_ID,
        PROMOTION_TYPE_SRC_ID,
        SOURCE_SYSTEM,
        SOURCE_TABLE,
        PROMOTION_TYPE_NAME,
        SALE_PERCENTAGE,
        INSERT_DT,
        UPDATE_DT)
    SELECT
        -1 AS PROMOTION_TYPE_SURR_ID,
        'n.a' AS PROMOTION_TYPE_SRC_ID,
        'MANUAL' AS SOURCE_SYSTEM,
        'MANUAL' AS SOURCE_TABLE,
        'n.a' AS PROMOTION_TYPE_NAME,
        -1 AS SALE_PERCENTAGE,
        '1900-01-01' AS INSERT_DT,
        '1900-01-01' AS UPDATE_DT
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_DM.DIM_PROMOTION_TYPES
        WHERE PROMOTION_TYPE_SURR_ID = -1
    );
    
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT;
    log_message := 'Procedure CREATE_TABLE_DIM_PROMOTION_TYPES completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('CREATE_TABLE_DIM_PROMOTION_TYPES', num_rows_affected, log_message);
    
EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in CREATE_TABLE_DIM_PROMOTION_TYPES: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('CREATE_TABLE_DIM_PROMOTION_TYPES', log_message);
        RAISE;
END;
$$;






CREATE OR REPLACE PROCEDURE BL_DM.CREATE_TABLE_DIM_ITEMS()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer;
    log_message TEXT;
BEGIN
    CREATE SEQUENCE IF NOT EXISTS BL_DM.DIM_ITEMS_SEQ
        INCREMENT BY 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        START 1
        CACHE 1
        NO CYCLE;

    CREATE TABLE IF NOT EXISTS BL_DM.DIM_ITEMS (
        ITEM_SURR_ID BIGINT PRIMARY KEY,
        ITEM_SRC_ID VARCHAR(32),
        SOURCE_SYSTEM VARCHAR(32),
        SOURCE_TABLE VARCHAR(255),
        ITEM_NAME VARCHAR(255),
        ITEM_TYPE_ID BIGINT,
        ITEM_TYPE_NAME VARCHAR(255),
        ITEM_CATEGORY_ID BIGINT,
        ITEM_CATEGORY_NAME VARCHAR(255),
        INSERT_DT DATE,
        UPDATE_DT DATE
    );

    INSERT INTO BL_DM.DIM_ITEMS
        (ITEM_SURR_ID,
        ITEM_SRC_ID,
        SOURCE_SYSTEM,
        SOURCE_TABLE,
        ITEM_NAME,
        ITEM_TYPE_ID,
        ITEM_TYPE_NAME,
        ITEM_CATEGORY_ID,
        ITEM_CATEGORY_NAME,
        INSERT_DT,
        UPDATE_DT)
    SELECT
        -1 AS ITEM_SURR_ID,
        'n.a' AS ITEM_SRC_ID,
        'MANUAL' AS SOURCE_SYSTEM,
        'MANUAL' AS SOURCE_TABLE,
        'n.a' AS ITEM_NAME,
        -1 AS ITEM_TYPE_ID,
        'n.a' AS ITEM_TYPE_NAME,
        -1 AS ITEM_CATEGORY_ID,
        'n.a' AS ITEM_CATEGORY_NAME,
        '1900-01-01' AS INSERT_DT,
        '1900-01-01' AS UPDATE_DT
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_DM.DIM_ITEMS
        WHERE ITEM_SURR_ID = -1
    );
    
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT;
    log_message := 'Procedure CREATE_TABLE_DIM_ITEMS completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('CREATE_TABLE_DIM_ITEMS', num_rows_affected, log_message);
    
EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in CREATE_TABLE_DIM_ITEMS: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('CREATE_TABLE_DIM_ITEMS', log_message);
        RAISE;
END;
$$;










CREATE OR REPLACE PROCEDURE BL_DM.CREATE_TABLE_DIM_ORDER_PRIORITIES()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer;
    log_message TEXT;
BEGIN
    CREATE SEQUENCE IF NOT EXISTS BL_DM.DIM_ORDER_PRIORITIES_SEQ
        INCREMENT BY 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        START 1
        CACHE 1
        NO CYCLE;

    CREATE TABLE IF NOT EXISTS BL_DM.DIM_ORDER_PRIORITIES (
        ORDER_PRIORITY_SURR_ID BIGINT PRIMARY KEY,
        ORDER_PRIORITY_SRC_ID VARCHAR(32),
        SOURCE_SYSTEM VARCHAR(32),
        SOURCE_TABLE VARCHAR(255),
        ORDER_PRIORITY_NAME VARCHAR(255),
        ORDER_PRIORITY_DESCRIPTION VARCHAR(255),
        INSERT_DT DATE,
        UPDATE_DT DATE
    );

    INSERT INTO BL_DM.DIM_ORDER_PRIORITIES
        (ORDER_PRIORITY_SURR_ID,
        ORDER_PRIORITY_SRC_ID,
        SOURCE_SYSTEM,
        SOURCE_TABLE,
        ORDER_PRIORITY_NAME,
        ORDER_PRIORITY_DESCRIPTION,
        INSERT_DT,
        UPDATE_DT)
    SELECT
        -1 AS ORDER_PRIORITY_SURR_ID,
        'n.a' AS ORDER_PRIORITY_SRC_ID,
        'MANUAL' AS SOURCE_SYSTEM,
        'MANUAL' AS SOURCE_TABLE,
        'n.a' AS ORDER_PRIORITY_NAME,
        'n.a' AS ORDER_PRIORITY_DESCRIPTION,
        '1900-01-01' AS INSERT_DT,
        '1900-01-01' AS UPDATE_DT
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_DM.DIM_ORDER_PRIORITIES
        WHERE ORDER_PRIORITY_SURR_ID = -1
    );
    
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT;
    log_message := 'Procedure CREATE_TABLE_DIM_ORDER_PRIORITIES completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('CREATE_TABLE_DIM_ORDER_PRIORITIES', num_rows_affected, log_message);
    
EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in CREATE_TABLE_DIM_ORDER_PRIORITIES: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('CREATE_TABLE_DIM_ORDER_PRIORITIES', log_message);
        RAISE;
END;
$$;





CREATE OR REPLACE PROCEDURE BL_DM.CREATE_TABLE_DIM_DATES()
LANGUAGE plpgsql
AS $$
DECLARE
    log_message TEXT;
BEGIN
	CREATE TABLE IF NOT EXISTS BL_DM.DIM_DATES (
	    DATE_ID DATE PRIMARY KEY,
	    DAY_NAME VARCHAR(9),
	    DAY_NUMBER_IN_WEEK INT,
	    CALENDAR_WEEK_NUMBER INT,
	    CALENDAR_MONTH_NUMBER INT,
	    CALENDAR_MONTH_NAME VARCHAR(9),
	    DAYS_IN_CAL_MONTH INT,
	    END_DAY_OF_CAL_MONTH INT,
	    CALENDAR_QUARTER_NUMBER INT,
	    CALENDAR_YEAR INT,
	    DAYS_IN_CAL_YEAR INT,
	    END_OF_CAL_YEAR INT
	);
    log_message := 'Procedure CREATE_TABLE_DIM_DATES completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('CREATE_TABLE_DIM_DATES', log_message);
    
EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in CREATE_TABLE_DIM_DATES: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('CREATE_TABLE_DIM_DATES', log_message);
        RAISE;
END;
$$;



CREATE OR REPLACE PROCEDURE CREATE_TABLE_DIM_STORES_SCD()
LANGUAGE plpgsql
AS $$
DECLARE
    num_rows_affected integer;
    log_message TEXT;
BEGIN
	CREATE SEQUENCE IF NOT EXISTS BL_DM.DIM_STORES_SCD_SEQ
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9223372036854775807
	START 1
	CACHE 1
	NO CYCLE;
	
    CREATE TABLE IF NOT EXISTS BL_DM.DIM_STORES_SCD (
        STORE_SURR_ID BIGINT,
        STORE_SRC_ID VARCHAR(32),
        SOURCE_SYSTEM VARCHAR(32),
        SOURCE_TABLE VARCHAR(255),
        STORE_SIZE_ID BIGINT,
        STORE_SIZE_NAME VARCHAR(255),
        STORE_SIZE_DESCRIPTION VARCHAR(255),
        STORE_ADDRESS_ID BIGINT,
        STORE_ADDRESS_NAME VARCHAR(255),
        STORE_CITY_ID BIGINT,
        STORE_CITY_NAME VARCHAR(255),
        STORE_COUNTRY_ID BIGINT,
        STORE_COUNTRY_NAME VARCHAR(255),
        STORE_REGION_ID BIGINT,
        STORE_REGION_NAME VARCHAR(255),
        START_DT DATE,
        END_DT DATE,
        IS_ACTIVE BOOLEAN,
        INSERT_DT DATE,
        PRIMARY KEY (STORE_SURR_ID, START_DT)
    );

    INSERT INTO BL_DM.DIM_STORES_SCD
        (STORE_SURR_ID,
        STORE_SRC_ID,
        SOURCE_SYSTEM,
        SOURCE_TABLE,
        STORE_SIZE_ID,
        STORE_SIZE_NAME,
        STORE_SIZE_DESCRIPTION,
        STORE_ADDRESS_ID,
        STORE_ADDRESS_NAME,
        STORE_CITY_ID,
        STORE_CITY_NAME,
        STORE_COUNTRY_ID,
        STORE_COUNTRY_NAME,
        STORE_REGION_ID,
        STORE_REGION_NAME,
        START_DT,
        END_DT,
        IS_ACTIVE,
        INSERT_DT)
    SELECT
        -1 AS STORE_SURR_ID,
        'n.a' AS STORE_SRC_ID,
        'MANUAL' AS SOURCE_SYSTEM,
        'MANUAL' AS SOURCE_TABLE,
        -1 AS STORE_SIZE_ID,
        'n.a' AS STORE_SIZE_NAME,
        'n.a' AS STORE_SIZE_DESCRIPTION,
        -1 AS STORE_ADDRESS_ID,
        'n.a' AS STORE_ADDRESS_NAME,
        -1 AS STORE_CITY_ID,
        'n.a' STORE_CITY_NAME,
        -1 AS STORE_COUNTRY_ID,
        'n.a' STORE_COUNTRY_NAME,
        -1 AS STORE_REGION_ID,
        'n.a' STORE_REGION_NAME,
        '1900-01-01' AS START_DT,
        '9999-12-31' AS END_DT,
        'Y' AS IS_ACTIVE,
        '1900-01-01' AS INSERT_DT
    WHERE NOT EXISTS (
        SELECT 1
        FROM BL_DM.DIM_STORES_SCD
        WHERE STORE_SURR_ID = -1
    );
    
    GET DIAGNOSTICS num_rows_affected = ROW_COUNT;
    log_message := 'Procedure CREATE_TABLE_DIM_STORES_SCD completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, num_rows_affected, log_message) VALUES ('CREATE_TABLE_DIM_STORES_SCD', num_rows_affected, log_message);
    
EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in CREATE_TABLE_DIM_STORES_SCD: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('CREATE_TABLE_DIM_STORES_SCD', log_message);
        RAISE;
END;
$$;





CREATE OR REPLACE PROCEDURE BL_DM.CREATE_TABLE_FCT_SALES()
LANGUAGE plpgsql
AS $$
DECLARE
    log_message TEXT;
BEGIN
	CREATE TABLE IF NOT EXISTS BL_DM.FCT_SALES (
	    SALE_SURR_ID BIGINT,
	    SALES_CHANNEL_ID BIGINT REFERENCES BL_DM.DIM_SALES_CHANNELS(SALES_CHANNEL_SURR_ID),
	    STORE_ID BIGINT,
	    ITEM_ID BIGINT REFERENCES BL_DM.DIM_ITEMS(ITEM_SURR_ID),
	    ORDERING_WAY_ID BIGINT REFERENCES BL_DM.DIM_ORDERING_WAYS(ORDERING_WAY_SURR_ID),
	    ORDER_PRIORITY_ID BIGINT REFERENCES BL_DM.DIM_ORDER_PRIORITIES(ORDER_PRIORITY_SURR_ID),
	    ORDER_DATE_ID DATE REFERENCES BL_DM.DIM_DATES(DATE_ID),
	    PAYMENT_METHOD_ID BIGINT REFERENCES BL_DM.DIM_PAYMENT_METHODS(PAYMENT_METHOD_SURR_ID),
	    CUSTOMER_TYPE_ID BIGINT REFERENCES BL_DM.DIM_CUSTOMER_TYPES(CUSTOMER_TYPE_SURR_ID),
	    PROMOTION_TYPE_ID BIGINT REFERENCES BL_DM.DIM_PROMOTION_TYPES(PROMOTION_TYPE_SURR_ID),
	    SALE_PERCENTAGE DECIMAL(10, 2),
	    UNITS_SOLD BIGINT,
	    UNIT_PRICE DECIMAL(10, 2),
	    UNIT_COST DECIMAL(10, 2),
	    TOTAL_PRICE DECIMAL(12, 2),
	    TOTAL_REVENUE DECIMAL(12, 2),
	    INSERT_DT DATE,
	    PRIMARY KEY (SALE_SURR_ID, ORDER_DATE_ID)
    )
	PARTITION BY RANGE (ORDER_DATE_ID);
	   
    log_message := 'Procedure CREATE_TABLE_DIM_DATES completed successfully.';
    INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('CREATE_TABLE_DIM_DATES', log_message);
    
EXCEPTION
    WHEN OTHERS THEN
        log_message := 'Error in CREATE_TABLE_DIM_DATES: ' || SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message) VALUES ('CREATE_TABLE_DIM_DATES', log_message);
        RAISE;
END;
$$;
   
   



CREATE OR REPLACE PROCEDURE BL_DM.CREATE_ALL_BL_DM_TABLES()
LANGUAGE plpgsql
AS $$
BEGIN
	CALL BL_DM.CREATE_TABLE_DIM_CUSTOMER_TYPES();
	CALL BL_DM.CREATE_TABLE_DIM_PAYMENT_METHODS();
	CALL BL_DM.CREATE_TABLE_DIM_ORDERING_WAYS();
	CALL BL_DM.CREATE_TABLE_DIM_SALES_CHANNELS();
	CALL BL_DM.CREATE_TABLE_DIM_PROMOTION_TYPES();
	CALL BL_DM.CREATE_TABLE_DIM_ITEMS();
	CALL BL_DM.CREATE_TABLE_DIM_ORDER_PRIORITIES();
	CALL BL_DM.CREATE_TABLE_DIM_DATES();
	CALL BL_DM.CREATE_TABLE_DIM_STORES_SCD();
	CALL BL_DM.CREATE_TABLE_FCT_SALES();

    INSERT INTO sa_sales.log_table (procedure_name, log_message)
    VALUES ('CREATE_ALL_BL_DM_TABLES', 'All procedures completed successfully.');
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Error in CREATE_ALL_BL_DM_TABLES: %', SQLERRM;
        INSERT INTO sa_sales.log_table (procedure_name, log_message)
        VALUES ('CREATE_ALL_BL_DM_TABLES', 'Error: ' || SQLERRM);
        RAISE;
END;
$$;


CALL CREATE_ALL_BL_DM_TABLES();

COMMIT;